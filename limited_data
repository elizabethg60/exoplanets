import numpy as np
import matplotlib.pyplot as plt
import math
from mpl_toolkits import mplot3d

#first half
def read_half(filename):
    f = open(filename, 'r')
    f.readline()
    rv = np.loadtxt(f)
    return rv[0:len(rv)//2]
'''
#every other - even
def read_everyother_e(filename):
    f = open(filename, 'r')
    f.readline()
    rv = np.loadtxt(f)
    everyother = []
    for i in range(0, len(rv)):
        if i % 2 == 0:
            everyother.append(rv[i])
    return np.array(everyother)
#every other four
def read_every4(filename):
    f = open(filename, 'r')
    f.readline()
    rv = np.loadtxt(f)
    everyother = []
    for i in range(0, len(rv), 4):
        everyother.append(rv[i])
    return np.array(everyother)
'''
#second half
def read_half2(filename):
    f = open(filename, 'r')
    f.readline()
    rv = np.loadtxt(f)
    return rv[len(rv)//2: len(rv)]
#every other - odd
def read_everyother_o(filename):
    f = open(filename, 'r')
    f.readline()
    rv = np.loadtxt(f)
    everyother = []
    for i in range(0, len(rv)):
        if i % 2 != 0:
            everyother.append(rv[i])
    return np.array(everyother)
#every other three
def read_every3(filename):
    f = open(filename, 'r')
    f.readline()
    rv = np.loadtxt(f)
    everyother = []
    for i in range(0, len(rv), 3):
        everyother.append(rv[i])
    return np.array(everyother)



def model_2(filename):    
    #extracting rv values
    data = read_every3(filename)
    model_sum = data[:,1]

    #x-axis: 3 day orbit
    #time = np.arange(0,3,3/len(model_sum))
    time = data[:, 0]
    
    #plotting time vs provided rv data for each model
    plt.plot(time, model_sum)
    plt.xlabel("Time")
    plt.title("Radial Velocity (2 Planets) vs Time")
    plt.ylabel("Radial Velocity")
    plt.show()

    #chisquared b/w provided rv data and sin waves with dif periods for each model    
    period = np.arange(0.1,3,.01)
    chi_squared = np.zeros((len(period),len(period)))
    for i in range(0,len(period)):
        model_one = 500 * np.sin((time*2*math.pi)/period[i])
        for j in range(0,len(period)):
            model_two = 500 * np.sin((time*2*math.pi)/period[j])
            model = model_one + model_two
            chi_squared_stat = sum(((model-model_sum)**2)/50**2)
            chi_squared[i,j] = chi_squared_stat
    
    
    #find the period with min chisquared
    min_chi = np.min(chi_squared)    
    x = np.argwhere(chi_squared == min_chi)
    min_periods = period[x[0]]
    
    #plotting periods vs chisquared
    ax = plt.axes(projection="3d")
    x = y = period
    X,Y = np.meshgrid(x,y)
    Z = np.log10(chi_squared)
    ax.plot_surface(X, Y, Z)
    ax.set_zlim(0.1,5)
    plt.xlabel("Period")
    plt.title("Two Planets' Period vs Chi-Squared")
    plt.ylabel("Period - x")
    ax.set_zlabel("Chi_Squared")
    plt.show()
    
    locate = np.where(chi_squared == min_chi)
    first_locate = locate[0]
    
    #slicing 3d data
    plt.plot(period, chi_squared[first_locate[0]])
    plt.title("Slice 1")
    
    #finding confidence intervals
    min1_array = [min(chi_squared[first_locate[0]])+2.3]*len(period)
    plt.plot(period, min1_array)
    idx1 = np.argwhere(np.diff(np.sign(np.array(chi_squared[first_locate[0]]) - np.array(min1_array)))).flatten()
    plt.show()
    
    #slicing 3d data
    plt.plot(period, chi_squared[first_locate[1]])
    plt.title("Slice 2")
    
    #finding confidence intervals
    min2_array = [min(chi_squared[first_locate[1]])+2.3]*len(period)
    plt.plot(period, min2_array)
    idx2 = np.argwhere(np.diff(np.sign(np.array(chi_squared[first_locate[1]]) - np.array(min2_array)))).flatten()
    plt.show()

    print("Minimum Period: {}".format(min_periods))
    print("Minimum Chisquared: {}".format(min_chi))
    print("Confidence Interval One: {}".format(period[idx1]))
    print("Confidence Interval Two: {}".format(period[idx2]))
    
    #actual data
    plt.scatter(time, model_sum) 
    time_model = np.arange(0,3,.001)
    #best model - minimum periods
    best_model = 500 * np.sin((time_model*2*math.pi)/min_periods[0]) + 500 * np.sin((time_model*2*math.pi)/min_periods[1])
    plt.plot(time_model, best_model, label = "Min Periods")
    #best model - first one of two lower
    best_model1 = 500 * np.sin((time_model*2*math.pi)/(period[idx1])[0]) + 500 * np.sin((time_model*2*math.pi)/((period[idx2])[1]))
    plt.plot(time_model, best_model1, label = "One Lower Bound")
    #best model - second of of two lower
    best_model2 = 500 * np.sin((time_model*2*math.pi)/(period[idx2])[0]) + 500 * np.sin((time_model*2*math.pi)/((period[idx1])[1]))
    plt.plot(time_model, best_model2, label = "Other Lower Bound")
    #best model - both lower bounds
    best_model3 = 500 * np.sin((time_model*2*math.pi)/(period[idx1])[0]) + 500 * np.sin((time_model*2*math.pi)/((period[idx2])[0]))
    plt.plot(time_model, best_model3, label = "Both Lower Bound")
    #best model - both upper bounds
    best_model4 = 500 * np.sin((time_model*2*math.pi)/(period[idx1])[1]) + 500 * np.sin((time_model*2*math.pi)/((period[idx2])[1]))
    plt.plot(time_model, best_model4, label = "Both Upper Bound")
    
    plt.title("Model of Best Fit")
    plt.legend()
    plt.show()
    
    print("Current Location: {}".format(first_locate))
    rnd = np.round(period,2)
    x = np.where(rnd == 0.4)
    y = np.where(rnd == 1.5)
    print("Actual Location: {}{}".format(x,y))

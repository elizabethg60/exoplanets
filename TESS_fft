import numpy as np
import matplotlib.pyplot as plt
import scipy.fftpack
from scipy.signal import find_peaks

def read_rv(filename):
    f = open(filename, 'r')
    rv_sum = [[]for i in range(953)] 
    rv_sum[0] = f.readline().strip().split()
    for i in np.arange(1,953):
        x = f.readline().strip().strip('[').strip(']').split()      
        while len(x) < 4000:
            x.extend(f.readline().strip().strip('[').strip(']').split() )
            rv_sum[i] = x
    return rv_sum

def metadata(filename):
    for i in range(36):
        filename.readline()
        
def read_table(filename):
    f = open(filename, 'r')
    metadata(f)
    data = {}
    for elem in range(5391):
        line = f.readline().strip().split()
        if line[0] not in data:
            data[str(line[0])] = []
        data[str(line[0])].append(line[0:])
    return data

def fft(star_id, N, T): #star id, sample size, sample space
    data = read_table("ajaaf477t2_mrt.txt")
    f = open("RV_values.txt", 'r')   
    rv_sum_5 = []
    for i in range(4000):
        rv_sum_5.append(f.readline().strip())
       
    ID = str(star_id)
    detected_transit = []
    true_periods = []
    undetected = []
    for i in range(0,len(data[ID])):
        true_periods.append(data['5'][i][8])
        if (data[ID][i][-1] == '1' and data[ID][i][-2] == '1'):
            detected_transit.append(data[ID][i][8]) 
        else:
            undetected.append(data['5'][i][8])

    yf = scipy.fftpack.fft(rv_sum_5)
    xf = np.linspace(0.0, 1.0/(2.0*T), N/2)
    fig, ax = plt.subplots()
    ax.plot(1/xf, 2.0/N * np.abs(yf[:N//2]))
    plt.xlim(0,200)
    y = [0,max(2.0/N * np.abs(yf[:N//2]))]
    for i in range(0,len(detected_transit)):
        x = [float(detected_transit[i]), float(detected_transit[i])]
        plt.plot(x,y, color='r', linestyle='--')
    for i in range(0,len(undetected)):
        x = [float(undetected[i]), float(undetected[i])]
        plt.plot(x,y, color='k', linestyle='--')
    plt.show()

    print("True Periods: {}".format(true_periods)) 
    peaks, _ = find_peaks(2.0/N * np.abs(yf[:N//2]), height=0)
    for i in peaks:
        print(1/xf[i])

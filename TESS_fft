import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.fftpack
from scipy.signal import find_peaks

G = 6.6743 * 10**-11
solar_mass = 2 * 10**30
earth_mass = 6 *10**24
AU = 1.5 *10**11
solar_radius = 7 * 10**8

def metadata(filename):
    for i in range(36):
        f.readline()

#reads in table info into a dictionary w star id - pop is for 1st to remove titles    
def read_table(filename):
    f = open(filename, 'r')
    metadata(f)
    data = {}
    for elem in range(5427):
        line = f.readline().strip().split()
        if line[0] not in data:
            data[str(line[0])] = []
        data[str(line[0])].append(line[0:])
    x = list(data['1'])
    x.pop(0)
    x.pop(0)
    data['1'] = x
    return data
        
def fft(star_id, N, T): #star id, sample size, sample space
    ID = str(star_id)
    time = np.linspace(0.0, N*T, N)
    
    data_table = read_table("ajaaf477t2_mrt.txt") 
    
    #appends periods into appropriate list based on if transit/detected or not
    detected_transit = []
    true_periods = []
    undetected = []
    for i in range(0,len(data_table[ID])):
        true_periods.append(data_table[ID][i][8])
        if (data_table[ID][i][-1] == '1' and data_table[ID][i][-2] == '1'):
            detected_transit.append(data_table[ID][i][8]) 
        else:
            undetected.append(data_table[ID][i][8])

    #runs fft rv_sum[star_id] that is created outside this function
    yf = scipy.fftpack.fft(rv_sum[star_id])
    xf = np.linspace(0.0, 1.0/(2.0*T), N/2)
    fig, ax = plt.subplots()
    ax.plot(1/xf, 2.0/N * np.abs(yf[:N//2]))
    y = [0,max(2.0/N * np.abs(yf[:N//2]))]
    for i in range(0,len(detected_transit)):
        x = [float(detected_transit[i]), float(detected_transit[i])]
        plt.plot(x,y, color='r', linestyle='--')
    for i in range(0,len(undetected)):
        x = [float(undetected[i]), float(undetected[i])]
        plt.plot(x,y, color='k', linestyle='--')
    ax.set_xscale('log')
    plt.xlabel('Period')
    plt.ylabel('Amplitude')
    plt.show()
    
    #determines location on x-axis of peaks aka found_periods
    found_periods = []
    peaks, _ = find_peaks(2.0/N * np.abs(yf[:N//2]), height=1.0)
    for i in peaks:
        found_periods.append((1/xf[i]))
    found_periods.reverse()
    for i in range(0, len(true_periods)): 
        true_periods[i] = float(true_periods[i]) 
    
    #corrects the index of found periods in case not all are found in fft
    found_index = []
    for i in found_periods:
        diff = []
        for j in true_periods:
            x = np.abs(i-j)
            diff.append(x)            
        index = np.argmin(diff)
        found_index.append(index)
    true_index = np.arange(0, len(true_periods))
    diff_index = [x for x in true_index if x not in found_index]
    for i in diff_index:
        found_periods.insert(i, float(0)) #0 indicits not found
    list(found_periods)
    print("True Periods: {}".format(true_periods))
    print("Found Periods: {}".format(found_periods))
    print("\n")
   
    #determines true amp of planets rv curve based on kelper's 3rd law
    true_amp = []
    for i in range(0,len(data_table[ID])):
        inc = float(data_table[ID][i][-8]) * (np.pi/180)
        Teff = int(data_table[ID][i][2])
        p_mass = float(data_table[ID][i][-7])
        
        star_mass = -22.296508 + (1.5446387*10**-2)*Teff - (3.488452*10**-6)*(Teff**2) + (2.64961*10**-10)*(Teff**3)
        star_radius = -16.883175 + 1.1835396*10**-2*Teff - (2.70872*10**-6)*(Teff**2) + 2.105028*10**-10*(Teff**3)
        
        p_mass = p_mass * earth_mass
        star_mass = star_mass * solar_mass
        star_radius = star_radius * solar_radius
        
        a_r = float(data_table[ID][i][-9])
        a_table = star_radius*a_r       

        amp = G**(1/2)*(star_mass + p_mass)**(-1/2)*(a_table)**(-1/2)*p_mass*np.cos(inc)
        true_amp.append(amp)
    #determines found amp of planets rv curved based of peaks heights in fft
    found_amp = []
    for i in found_periods:
        if i != 0:
            x = np.argwhere(1/xf == i)
            found_amp.append(float(2.0/N * np.abs(yf[:N//2])[x]))
        if i == 0:
            found_amp.insert(id(i), float(0)) #0 indicts not found
    list(found_amp)
    print("True Amplitudes: {}".format(true_amp))
    print("Found Amplitudes: {}".format(list(found_amp)))
   
    #true sine waves from tables
    plt.plot(time, rv_sum[star_id], label = "sum of {} planets".format(len(data[ID])))
    for i in range(0, len(data[ID])):
        plt.plot(time, data[ID][i], label = "planet {}".format(i+1))   
    plt.xlabel("Time (days)")
    plt.ylabel("Radial Velocity (m/s)")
    plt.title("True - Star {}".format(star_id))
    plt.legend()
    plt.show()
          
    #found sine waves from fft
    found_planet_sine = [[]for i in range(len(found_periods))]
    noise = np.random.normal(0,1,N)
    for i in range(0, len(found_periods)):
        sine = found_amp[i] * np.sin(((time*2*np.pi)/found_periods[i]) - phase_list[star_id][i]) + noise
        found_planet_sine[i] = sine
    for i in diff_index: #replace nan when planet not found w zeros
        found_planet_sine[i] = [0] * len(found_planet_sine[1])  
    #adding up individual planet rv curves
    star_RV = np.add(found_planet_sine[0], found_planet_sine[1])
    if len(found_planet_sine) > 2:
        for i in range(2, len(found_planet_sine)):           
            star_RV = np.add(star_RV, found_planet_sine[i])
    plt.plot(time, star_RV, label = "sum of planets")
    for i in range(0,len(found_periods)):
        if found_periods[i] != 0:
            plt.plot(time, found_planet_sine[i], label = "planet {}".format(i+1))   
    plt.xlabel("Time (days)")
    plt.ylabel("Radial Velocity (m/s)")
    plt.title("Calculated - Star {}".format(star_id))
    plt.legend()
    plt.show()
   
    #detected transits sine wave each plotted over summed up RV over entire time for true & found
    #determines index of when value in detected_transit occurs in true_periods
    loc = []
    for i in detected_transit:
        loc.append(true_periods.index(float(i)))  
    fig, axs = plt.subplots(2, sharex=True, sharey=True)
    fig.suptitle("Detected Transits - Star {}".format(star_id))
    axs[0].plot(time, rv_sum[star_id], label = "True RV")
    #axs[0].plot(time, rv_sum[star_id] - data[ID][0], label = "True RV Minus Planet 1")
    for i in loc:
        sine = true_amp[int(i)] * np.sin(((time*2*np.pi)/true_periods[int(i)]) - phase_list[star_id][i]) + noise
        axs[0].plot(time, sine, label = "True transits - Planet {}".format(i + 1))
    axs[0].legend()
    axs[1].plot(time, star_RV, label = "Found RV")
    #axs[1].plot(time, star_RV - found_planet_sine[0], label = "Found RV Minus Planet 1")
    for i in loc:
        sine = found_amp[int(i)] * np.sin(((time*2*np.pi)/found_periods[int(i)]) - phase_list[star_id][i]) + noise
        axs[1].plot(time, sine, label = "Found transits - Planet {}".format(i + 1))
    plt.xlabel("Time (days)")
    plt.ylabel("Radial Velocity (m/s)")
    plt.legend()
    plt.show()  
    
    #detected transits sine wave plotted separated over summed up RV over phase of transit's period
    #minus_planet1 = star_RV - found_planet_sine[0]
    for i in loc:    
        plt.plot(time % found_periods[i], star_RV, '.', label = "Found RV")
        #plt.plot(time % found_periods[i], minus_planet1, 'r.', label = "Found RV Minus Planet 1")
        plt.plot(time % found_periods[i], found_amp[i] * np.sin((((time % found_periods[i])*2*np.pi)/found_periods[i] - phase_list[star_id][i])), '.', label = "Transit")
        plt.xlim(0, found_periods[i])
        plt.xlabel("Time (days)")
        plt.ylabel("Radial Velocity (m/s)")
        plt.legend()
        plt.title("Detected Transits - Star {} Planet {}".format(star_id, i + 1))
        plt.show()
    
    #plots individual planets true v found curve over its phase by subtracting other planets
    planets = np.arange(0, len(true_periods))   
    found_planets = np.arange(0, len(found_planet_sine))
    fit_amp = []
    for i in found_planets:
        true = rv_sum[star_id]
        found = star_RV
        for j in planets:
            if i != j:
                true = true - data[ID][j] 
        for j in found_planets:
            if i != j:
                found = found - found_planet_sine[j]
                
        amp = np.arange(0,5,0.01)
        chi_squared = []
        for j in range(0, len(amp)):
            rv_element = amp[j] * np.sin((2*np.pi*time)/found_periods[i] - phase_list[star_id][i])
            chi_squared_stat = sum(((rv_element - found)**2)/1**2)
            chi_squared.append(chi_squared_stat)
        #find the semiaplitude with min chisquared
        min_y = min(chi_squared)
        min_x = amp[chi_squared.index(min_y)]      
        fit_amp.append(min_x)
        
        plt.plot(time % found_periods[i], found, '.', label = "Found RV")        
        plt.plot(time % true_periods[i], true, '.', label = "True RV")
        plt.plot(time % true_periods[i], true_amp[i] * np.sin(((time % true_periods[i])*2*np.pi)/true_periods[i] - phase_list[star_id][i]), 'g.', label = "True")
        plt.plot(time % found_periods[i], found_amp[i] * np.sin(((time % found_periods[i])*2*np.pi)/found_periods[i] - phase_list[star_id][i]), 'y.', label = "Found")
        plt.plot(time % found_periods[i], min_x * np.sin((2*np.pi*(time % found_periods[i]))/found_periods[i] - phase_list[star_id][i]), 'k.', label = "Amp Fitted")
        plt.xlim(0,true_periods[i])
        plt.legend()
        plt.xlabel("Time (days)")
        plt.ylabel("Radial Velocity (m/s)")
        plt.title("Detected Transits - Star {} Planet {}".format(star_id, i+1))
        plt.show()  

    print("True Amplitudes: {}".format(list(round(num, 2) for num in true_amp)))
    print("Found Amplitudes: {}".format(list(round(num, 2) for num in found_amp)))
    print("Fitted Amplitudes: {}".format(list(round(num, 2) for num in fit_amp)))

def fft_noplots(star_id, N, T): #star id, sample size, sample space
    ID = str(star_id)
    time = np.linspace(0.0, N*T, N)    
    data_table = read_table("ajaaf477t2_mrt.txt") 
    
    #appends periods into appropriate list based on if transit/detected or not
    detected_transit = []
    true_periods = []
    undetected = []
    for i in range(0,len(data_table[ID])):
        true_periods.append(data_table[ID][i][8])
        if (data_table[ID][i][-1] == '1' and data_table[ID][i][-2] == '1'):
            detected_transit.append(data_table[ID][i][8]) 
        else:
            undetected.append(data_table[ID][i][8])

    #runs fft rv_sum[star_id] that is created outside this function
    yf = scipy.fftpack.fft(rv_sum[star_id])
    xf = np.linspace(0.0, 1.0/(2.0*T), N/2)    
    #determines location on x-axis of peaks aka found_periods
    found_periods = []
    peaks, _ = find_peaks(2.0/N * np.abs(yf[:N//2]), height=1.0)
    for i in peaks:
        found_periods.append((1/xf[i]))
    found_periods.reverse()
    for i in range(0, len(true_periods)): 
        true_periods[i] = float(true_periods[i]) 
    
    #corrects the index of found periods in case not all are found in fft
    found_index = []
    for i in found_periods:
        diff = []
        for j in true_periods:
            x = np.abs(i-j)
            diff.append(x)            
        index = np.argmin(diff)
        found_index.append(index)
    true_index = np.arange(0, len(true_periods))
    diff_index = [x for x in true_index if x not in found_index]
    for i in diff_index:
        found_periods.insert(i, float(0)) #0 indicits not found
    list(found_periods)
   
    #determines true amp of planets rv curve based on kelper's 3rd law
    true_amp = []
    for i in range(0,len(data_table[ID])):
        inc = float(data_table[ID][i][-8]) * (np.pi/180)
        Teff = int(data_table[ID][i][2])
        p_mass = float(data_table[ID][i][-7])
        
        star_mass = -22.296508 + (1.5446387*10**-2)*Teff - (3.488452*10**-6)*(Teff**2) + (2.64961*10**-10)*(Teff**3)
        star_radius = -16.883175 + 1.1835396*10**-2*Teff - (2.70872*10**-6)*(Teff**2) + 2.105028*10**-10*(Teff**3)
        
        p_mass = p_mass * earth_mass
        star_mass = star_mass * solar_mass
        star_radius = star_radius * solar_radius
        
        a_r = float(data_table[ID][i][-9])
        a_table = star_radius*a_r       

        amp = G**(1/2)*(star_mass + p_mass)**(-1/2)*(a_table)**(-1/2)*p_mass*np.cos(inc)
        true_amp.append(amp)
    #determines found amp of planets rv curved based of peaks heights in fft
    found_amp = []
    for i in found_periods:
        if i != 0:
            x = np.argwhere(1/xf == i)
            found_amp.append(float(2.0/N * np.abs(yf[:N//2])[x]))
        if i == 0:
            found_amp.insert(id(i), float(0)) #0 indicts not found
    list(found_amp)
          
    #found sine waves from fft
    found_planet_sine = [[]for i in range(len(found_periods))]
    noise = np.random.normal(0,1,N)
    for i in range(0, len(found_periods)):
        sine = found_amp[i] * np.sin(((time*2*np.pi)/found_periods[i]) - phase_list[star_id][i]) + noise
        found_planet_sine[i] = sine
    for i in diff_index: #replace nan when planet not found w zeros
        found_planet_sine[i] = [0] * len(found_planet_sine[1])  
    #adding up individual planet rv curves
    star_RV = np.add(found_planet_sine[0], found_planet_sine[1])
    if len(found_planet_sine) > 2:
        for i in range(2, len(found_planet_sine)):           
            star_RV = np.add(star_RV, found_planet_sine[i])
  
    #plots individual planets true v found curve over its phase by subtracting other planets
    planets = np.arange(0, len(true_periods))   
    found_planets = np.arange(0, len(found_planet_sine))
    fit_amp = []
    for i in found_planets:
        true = rv_sum[star_id]
        found = star_RV
        for j in planets:
            if i != j:
                true = true - data[ID][j] 
        for j in found_planets:
            if i != j:
                found = found - found_planet_sine[j]                
        amp = np.arange(0,5,0.01)
        chi_squared = []
        for j in range(0, len(amp)):
            rv_element = amp[j] * np.sin((2*np.pi*time)/found_periods[i] - phase_list[star_id][i])
            chi_squared_stat = sum(((rv_element - found)**2)/1**2)
            chi_squared.append(chi_squared_stat)
        min_y = min(chi_squared)
        min_x = amp[chi_squared.index(min_y)]      
        fit_amp.append(min_x)        
    
    #finding mass
    found_mass = []
    for i in range(0,len(found_periods)):
        planet_mass = ((4*np.pi**2*((float(data_table[ID][i][-9])/float(star_radii[star_id][i])))**3)/G*found_periods[i]**2) - star_masses[star_id][i]
        found_mass.append(planet_mass)
    print(found_mass)
    
    write_data = [[]for i in range(len(found_periods))] 
    write = []
    for i in range(0,len(true_periods)):
        write.append(ID)
        write.append(i + 1)
        write.append(round(true_periods[i],2))
        write.append(round(found_periods[i],2))
        write.append(round(true_amp[i],2))
        write.append(round(found_amp[i],2))
        write.append(round(fit_amp[i],2))
        #write.append(round(float(data_table[ID][i][-7]),2))
        #write.append(round(found_mass[i],2))
        write_data[i] = write
        write = []
    return write_data

def run_all():
    title = ['Star', 'Planet', 'True_Period', 'Found_Period', 'True_Amp', 'Found_Amp', 'Fitted_Amp']     
    df = pd.DataFrame(fft_noplots(1,4000,0.25), columns = title)
    for i in range(1,5):
        df2 = pd.DataFrame(fft_noplots(i+1,4000,0.25), columns = title)
        df = df.append(df2)
    df.to_pickle("data.pkl")

      
#generating sine waves
f = open("ajaaf477t2_mrt.txt", 'r')
metadata(f)

#read in table
data = {}
for elem in range(5391):
    line = f.readline().strip().split()
    if line[0] not in data:
        data[str(line[0])] = []
    data[str(line[0])].append(line[0:])

#find individual planet RV sine wave
phase_list = [[]for i in range(953)]
star_masses = [[]for i in range(953)]
star_radii = [[]for i in range(953)]
for i in range(1,953):
    x = str(i)
    mass = []
    radius = []
    for j in range(0,len(data[x])):
        e = float(data[x][j][-4])
        period = float(data[x][j][8])*86400
        period_sin = float(data[x][j][8])
        inc = float(data[x][j][-8]) * (np.pi/180)
        Teff = int(data[x][j][2])
        p_mass = float(data[x][j][-7])
        
        #finding star mass & radius
        star_mass = -22.296508 + (1.5446387*10**-2)*Teff - (3.488452*10**-6)*(Teff**2) + (2.64961*10**-10)*(Teff**3)
        star_radius = -16.883175 + 1.1835396*10**-2*Teff - (2.70872*10**-6)*(Teff**2) + 2.105028*10**-10*(Teff**3)

        
        p_mass = p_mass * earth_mass
        star_mass = star_mass * solar_mass
        star_radius = star_radius * solar_radius
        mass.append(star_mass)
        radius.append(star_radius)        
        
        #finding semi-major axis both ways
        a_r = float(data[x][j][-9])
        a_table = star_radius*a_r
        
        #generating sine wave
        N = 4000
        T = 0.25
        time = np.linspace(0.0, N*T, N)
        amp_table = G**(1/2)*(star_mass + p_mass)**(-1/2)*(a_table)**(-1/2)*p_mass*np.cos(inc)
        noise = np.random.normal(0,1,N)
        phase = np.random.uniform(0,2*np.pi)
        RV = amp_table * np.sin(((time*2*np.pi)/period_sin - phase)) + noise
        
        data[x][j] = RV
        phase_list[i].append(phase)
    star_masses[i] = mass
    star_radii[i] = radius
#add individual planet sine wave to get total star RV
rv_sum = [[]for i in range(953)] #lst[0] will be blank therefore index = star id 
for i in range(1, 953):
    x = str(i)
    rv_sum[i] = np.add(data[x][0], data[x][1])
    if len(data[x]) > 2:
        for j in range(2, len(data[x])):
            rv_sum[i] = np.add(rv_sum[i], data[x][j])

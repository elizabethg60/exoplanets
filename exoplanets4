import numpy as np
import matplotlib.pyplot as plt
import math
from mpl_toolkits import mplot3d
from decimal import Decimal

def read_rv(filename):
    f = open(filename, 'r')
    f.readline()
    rv = np.loadtxt(f)[:, 1]
    return rv

def read_time(filename):
    f = open(filename, 'r')
    f.readline()
    time = np.loadtxt(f)[:, 0]
    return time

def groups(lst, n):
    for i in range(0,len(lst), n):
        yield lst[i:i+n]

#extracting data
model_sum = read_rv('vary_period_2planets.txt')
time = read_time('vary_period_2planets.txt')
amp = 500
noise = 50 
    
#plotting time vs provided rv data for each model
plt.plot(time, model_sum)
plt.xlabel("Time")
plt.title("Radial Velocity (2 Planets) vs Time")
plt.ylabel("Radial Velocity")
plt.show()

#chisquared b/w provided rv data and sin waves with dif periods for each model
#test =  np.arange(0.1,3,.01)  
#print(np.where(test == 0.4)) 
period = np.arange(0.1,3,.01)
'''index problem where 0.4 shouldn't start at one but index of 0.4 for test'''
chi_squared = np.zeros((len(period),len(period)))
for i in range(0,len(period)):
    model_one = amp * np.sin((time*2*math.pi)/period[i])
    for j in range(0,len(period)):
        model_two = amp * np.sin((time*2*math.pi)/period[j])
        model = model_one + model_two
        chi_squared_stat = sum(((model-model_sum)**2)/noise**2)
        chi_squared[i,j] = chi_squared_stat
 
#find the period with min chisquared
min_chi = np.min(chi_squared)    
x = np.argwhere(chi_squared == min_chi)
min_periods = period[x[0]]
'''
#plotting periods vs chisquared
ax = plt.axes(projection="3d")
x = y = period
X,Y = np.meshgrid(x,y)
Z = np.log10(chi_squared)
ax.plot_surface(X, Y, Z)
ax.set_zlim(0.1,5)
plt.xlabel("Period")
plt.title("Two Planets' Period vs Chi-Squared")
plt.ylabel("Period - x")
ax.set_zlabel("Chi_Squared")
plt.show()
    
locate = np.where(chi_squared == min_chi)
first_locate = locate[0]
    
#slicing 3d data
plt.plot(period, chi_squared[first_locate[0]])
plt.title("Slice 1")
    
#finding confidence intervals
min1_array = [min(chi_squared[first_locate[0]])+2.3]*len(period)
plt.plot(period, min1_array)
idx1 = np.argwhere(np.diff(np.sign(np.array(chi_squared[first_locate[0]]) - np.array(min1_array)))).flatten()
plt.show()
    
#slicing 3d data
plt.plot(period, chi_squared[first_locate[1]])
plt.title("Slice 2")
    
#finding confidence intervals
min2_array = [min(chi_squared[first_locate[1]])+2.3]*len(period)
plt.plot(period, min2_array)
idx2 = np.argwhere(np.diff(np.sign(np.array(chi_squared[first_locate[1]]) - np.array(min2_array)))).flatten()
plt.show()

print("Minimum Period: {}".format(min_periods))
print("Minimum Chisquared: {}".format(min_chi))
print("Confidence Interval One: {}".format(period[idx1]))
print("Confidence Interval Two: {}".format(period[idx2]))
    
#actual data
fig, (axs1, axs2) = plt.subplots(2)
fig.suptitle('Model of Best Fit')
axs1.scatter(time, model_sum) 
time_model = np.arange(0,3,.001)
#best model - minimum periods
best_model = amp * np.sin((time_model*2*math.pi)/min_periods[0]) + amp * np.sin((time_model*2*math.pi)/min_periods[1])
axs1.plot(time_model, best_model, label = "Min Periods")
#best model - first one of two lower
best_model1 = amp * np.sin((time_model*2*math.pi)/(period[idx1])[0]) + amp * np.sin((time_model*2*math.pi)/((period[idx2])[1]))
axs1.plot(time_model, best_model1, label = "Periods: 1.49 & 0.4")
#best model - second of of two lower
best_model2 = amp * np.sin((time_model*2*math.pi)/(period[idx2])[0]) + amp * np.sin((time_model*2*math.pi)/((period[idx1])[1]))
axs1.plot(time_model, best_model2, label = "Periods: 1.51 & 0.39")
#best model - both lower bounds
best_model3 = amp * np.sin((time_model*2*math.pi)/(period[idx1])[0]) + amp * np.sin((time_model*2*math.pi)/((period[idx2])[0]))
axs1.plot(time_model, best_model3, label = "Periods: 1.49 & 0.39")
#best model - both upper bounds
best_model4 = amp * np.sin((time_model*2*math.pi)/(period[idx1])[1]) + amp * np.sin((time_model*2*math.pi)/((period[idx2])[1]))
axs1.plot(time_model, best_model4, label = "Periods: 1.51 & 0.4")
axs1.legend()
axs1.set(ylabel = "Radial Velocity")
plt.ylim(-1000,1000)

    
#residual plot
res = model_sum - (amp * np.sin((time*2*math.pi)/min_periods[0]) + amp * np.sin((time*2*math.pi)/min_periods[1]))
avg_res = sum(res)/len(res)
axs2.scatter(time, res)
axs2.plot(time, [avg_res]*len(time))
plt.ylabel("Residuals")
plt.ylim(min(res)-10,max(res)+50)
    
plt.xlabel("Time")
plt.show()
print("Average Residual: {}".format(avg_res))
    
#subplot for each period
short_period = model_sum - (amp * np.sin((time*2*math.pi)/min_periods[1]))
long_period = model_sum - (amp * np.sin((time*2*math.pi)/min_periods[0]))

fig, axs = plt.subplots(2, sharex=True, sharey=True)
fig.suptitle('Individual Sine Waves')
axs[0].scatter(time, short_period)
axs[0].plot(time_model, (amp * np.sin((time_model*2*math.pi)/(period[idx2])[0])))
axs[0].plot(time_model, (amp * np.sin((time_model*2*math.pi)/min_periods[0])))
axs[1].scatter(time, long_period)
axs[1].plot(time_model, (amp * np.sin((time_model*2*math.pi)/min_periods[1])))
axs[1].plot(time_model, (amp * np.sin((time_model*2*math.pi)/(period[idx1])[0])))
axs[0].set(ylabel = "Radial Velocity")
plt.ylabel("Radial Velocity")
plt.xlabel("Time")
plt.show()

#plotting individual sine waves vs phase
div = int(round((max(time) - min(time)) / min_periods[1]))
n = len(time)//div
x = list(groups(long_period,n))
plt.scatter(time[0:n], x[0])
plt.scatter(time[0:n], x[1])
time_model1 = np.arange(0, min_periods[1], 0.001)
plt.plot(time_model1, amp * np.sin((time_model1*2*math.pi)/min_periods[1]))
plt.xlabel("Phase")
plt.title("Longer Period Phase")
plt.ylabel("Radial Velocity")
plt.show()

div = int(round((max(time)- min(time)) / min_periods[0]))
n = len(time)//div
x = list(groups(short_period,n))
for i in range(0,7):
    plt.scatter(time[0:n], x[i])
time_model2 = np.arange(0, min_periods[0], 0.001)
plt.plot(time_model2, amp * np.sin((time_model2*2*math.pi)/min_periods[0]))
plt.xlabel("Phase")
plt.title("Shorter Period Phase")
plt.ylabel("Radial Velocity")
plt.show()
'''
G = 6.6743 * 10**-8
star_mass = 1.989 * 10**30
p1_sec = min_periods[0]*86400
p2_sec = min_periods[1]*86400
k = 50000

k_values = []
planet_mass = range(10**28,10**29,10**24)
for M in planet_mass:
    x = G**(1/2)*(star_mass + M)**(-1/2)*(((p1_sec**2*G*(star_mass + M))/(4*(np.pi)**2))**(1/3))**(-1/2)*M
    k_values.append(x)
diff = [i - k for i in planet_mass]
ind = diff.index(min(i for i in diff if i > 0))
axs = ((p1_sec**2*G*(star_mass + planet_mass[ind]))/(4*(np.pi)**2))**(1/3)
print("{} Planet Mass: {} kg, Semi-Major Axis: {} cm".format(min_periods[0], '%.2E' % Decimal(planet_mass[ind]), axs))

k_values2 = []
for M in planet_mass:
    x2 = G**(1/2)*(star_mass + M)**(-1/2)*(((500**2*G*(star_mass + M))/(4*(np.pi)**2))**(1/3))**(-1/2)*M
    k_values2.append(x2)
diff2 = [i - k for i in planet_mass]
ind2 = diff2.index(min(i for i in diff2 if i > 0))
axs2 = ((p2_sec**2*G*(star_mass + planet_mass[ind2]))/(4*(np.pi)**2))**(1/3)
print("{} Planet Mass: {} kg, Semi-Major Axis: {} cm".format(min_periods[1], '%.2E' % Decimal(planet_mass[ind2]), axs2))


#expected 1.5 planet to have larger mass since it is further away but still has a larger period

import numpy as np
import matplotlib.pyplot as plt
import math
from mpl_toolkits import mplot3d


def read(filename):
    import numpy as np
    f = open(filename, 'r')
    f.readline()
    rv = np.loadtxt(f)[:, 1]
    return rv

def model_1(filename):
    #extracting rv values
    model1 = read(filename)

    #x-axis: 3 day orbit
    time = np.arange(0,3,3/len(model1))
    
    #plotting time vs provided rv data for each model
    plt.scatter(time, model1)
    plt.xlabel("Time")
    plt.title("Radial Velocity vs Time")
    plt.ylabel("Radial Velocity")
    plt.xlim(0, 3)
    plt.ylim(-1000,1000)
    plt.show()

    #chisquared b/w provided rv data and sin waves with dif periods for each model
    period = np.arange(0.1,3,.01)
    chi_squared1 = []
    for i in range(0,len(period)):
        rv_element1 = 500 * np.sin((time*2*math.pi)/period[i])
        #plt.plot(time,rv_element1)
        #plt.show()
        chi_squared_stat1 = sum((((rv_element1-model1)**2)/45**2))
        chi_squared1.append(chi_squared_stat1)    
    
    #plotting semiaplitude and chisquared
    plt.scatter(period, chi_squared1)
    plt.title("Chisquared vs Period")
    plt.xlabel("Period")
    plt.ylabel("Chisquared")
    plt.ylim(0,500)
    plt.xlim(0,3)
    
    #find the semiaplitude with min chisquared
    min_y = min(chi_squared1)
    min_x = period[chi_squared1.index(min_y)]
  
    #find confidence interval
    CI_array = [min_y+1]*len(period)
    plt.plot(period, CI_array)
    idx = np.argwhere(np.diff(np.sign(np.array(chi_squared1) - np.array(CI_array)))).flatten()
    plt.show()
    
    best_model = 500 * np.sin((time*2*math.pi)/min_x)
    plt.scatter(time, model1)
    plt.plot(time, best_model)
    plt.show()
    
    
    print("Minimum Period: {}".format(min_x))
    print("Minimum Chisquared: {}".format(min_y))
    print("Confidence Interval: {}".format(period[idx]))  


    
def model_2(filename):    
    #extracting rv values
    model_sum = read(filename)

    #x-axis: 3 day orbit
    time = np.arange(0,3,3/len(model_sum))
    
    #plotting time vs provided rv data for each model
    plt.plot(time, model_sum)
    plt.xlabel("Time")
    plt.title("Radial Velocity (2 Planets) vs Time")
    plt.ylabel("Radial Velocity")
    plt.show()

    #chisquared b/w provided rv data and sin waves with dif periods for each model    
    period = np.arange(0.1,3,.01)
    chi_squared = np.zeros((len(period),len(period)))
    for i in range(0,len(period)):
        model_one = 500 * np.sin((time*2*math.pi)/period[i])
        for j in range(0,len(period)):
            model_two = 500 * np.sin((time*2*math.pi)/period[j])
            model = model_one + model_two
            chi_squared_stat = sum(((model-model_sum)**2)/50**2)
            chi_squared[i,j] = chi_squared_stat
    
    #find the period with min chisquared
    min_chi = np.min(chi_squared)    
    x = np.argwhere(chi_squared == min_chi)
    min_periods = period[x[0]]

    #plotting periods vs chisquared
    ax = plt.axes(projection="3d")
    x = y = period
    X,Y = np.meshgrid(x,y)
    Z = np.log10(chi_squared)
    ax.plot_surface(X, Y, Z)
    ax.set_zlim(0.1,5)
    plt.xlabel("Period")
    plt.title("Two Planets' Period vs Chi-Squared")
    plt.ylabel("Period - x")
    ax.set_zlabel("Chi_Squared")
    plt.show()
    
    locate = np.where(chi_squared == min_chi)
    first_locate = locate[0]
    
    #slicing 3d data
    plt.plot(period, chi_squared[first_locate[0]])
    plt.title("Slice 1")
    
    #finding confidence intervals
    min1_array = [min(chi_squared[first_locate[0]])+2.3]*len(period)
    plt.plot(period, min1_array)
    idx1 = np.argwhere(np.diff(np.sign(np.array(chi_squared[first_locate[0]]) - np.array(min1_array)))).flatten()
    plt.show()
    
    #slicing 3d data
    plt.plot(period, chi_squared[first_locate[1]])
    plt.title("Slice 2")
    
    #finding confidence intervals
    min2_array = [min(chi_squared[first_locate[1]])+2.3]*len(period)
    plt.plot(period, min2_array)
    idx2 = np.argwhere(np.diff(np.sign(np.array(chi_squared[first_locate[1]]) - np.array(min2_array)))).flatten()
    plt.show()

    print("Minimum Period: {}".format(min_periods))
    print("Minimum Chisquared: {}".format(min_chi))
    print("Confidence Interval One: {}".format(period[idx1]))
    print("Confidence Interval Two: {}".format(period[idx2]))
    
    #actual data
    fig, (axs1, axs2) = plt.subplots(2)
    fig.suptitle('Model of Best Fit')
    axs1.scatter(time, model_sum) 
    time_model = np.arange(0,3,.001)
    #best model - minimum periods
    best_model = 500 * np.sin((time_model*2*math.pi)/min_periods[0]) + 500 * np.sin((time_model*2*math.pi)/min_periods[1])
    axs1.plot(time_model, best_model, label = "Min Periods")
    #best model - first one of two lower
    best_model1 = 500 * np.sin((time_model*2*math.pi)/(period[idx1])[0]) + 500 * np.sin((time_model*2*math.pi)/((period[idx2])[1]))
    axs1.plot(time_model, best_model1, label = "Periods: 1.49 & 0.4")
    #best model - second of of two lower
    best_model2 = 500 * np.sin((time_model*2*math.pi)/(period[idx2])[0]) + 500 * np.sin((time_model*2*math.pi)/((period[idx1])[1]))
    axs1.plot(time_model, best_model2, label = "Periods: 1.51 & 0.39")
    #best model - both lower bounds
    best_model3 = 500 * np.sin((time_model*2*math.pi)/(period[idx1])[0]) + 500 * np.sin((time_model*2*math.pi)/((period[idx2])[0]))
    axs1.plot(time_model, best_model3, label = "Periods: 1.49 & 0.39")
    #best model - both upper bounds
    best_model4 = 500 * np.sin((time_model*2*math.pi)/(period[idx1])[1]) + 500 * np.sin((time_model*2*math.pi)/((period[idx2])[1]))
    axs1.plot(time_model, best_model4, label = "Periods: 1.51 & 0.4")
    axs1.legend()
    axs1.set(ylabel = "Radial Velocity")
    plt.ylim(-1000,1000)

    
    #residual plot
    res = model_sum - (500 * np.sin((time*2*math.pi)/min_periods[0]) + 500 * np.sin((time*2*math.pi)/min_periods[1]))
    avg_res = sum(res)/len(res)
    axs2.scatter(time, res)
    axs2.plot(time, [avg_res]*len(time))
    plt.ylabel("Residuals")
    plt.ylim(min(res)-10,max(res)+50)
    
    plt.xlabel("Time")
    plt.show()
    print("Average Residual: {}".format(avg_res))
    
    #subplot for each period
    short_period = model_sum - (500 * np.sin((time*2*math.pi)/min_periods[1]))
    long_period = model_sum - (500 * np.sin((time*2*math.pi)/min_periods[0]))
    fig, axs = plt.subplots(2, sharex=True, sharey=True)
    fig.suptitle('Individual Sine Waves')
    axs[0].scatter(time, short_period)
    axs[0].plot(time_model, (500 * np.sin((time_model*2*math.pi)/(period[idx2])[0])))
    axs[0].plot(time_model, (500 * np.sin((time_model*2*math.pi)/min_periods[0])))
    axs[1].scatter(time, long_period)
    axs[1].plot(time_model, (500 * np.sin((time_model*2*math.pi)/min_periods[1])))
    axs[1].plot(time_model, (500 * np.sin((time_model*2*math.pi)/(period[idx1])[0])))
    axs[0].set(ylabel = "Radial Velocity")
    plt.ylabel("Radial Velocity")
    plt.xlabel("Time")
    plt.show()

import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

def read(filename):
    f = open(filename, 'r')
    f.readline()
    f.readline()
    rv = []
    for i in range(0,4000):
        rv.append(f.readline().strip().strip('\n'))
    for i in range(0, len(rv)): 
        rv[i] = float(rv[i]) 
    return np.array(rv)

def model(filename):    
    #extracting rv values
    f = open(filename, 'r')
    found_period = float(f.readline())
    phase = float(f.readline())
    rv_model = read(filename)
    
    time = np.linspace(0.0, len(rv_model)*0.25, len(rv_model))

    #chisquared b/w provided rv data and sin waves with dif amplitudes
    amp = np.arange(0,20,0.01)
    chi_squared = []
    for i in range(0, len(amp)):
        rv_element = amp[i] * np.sin((2*np.pi*time)/found_period - phase)
        chi_squared_stat = sum(((rv_element - rv_model)**2)/1**2)
        chi_squared.append(chi_squared_stat)
       
    #plotting semiaplitude and chisquared
    plt.plot(amp, chi_squared)
    plt.title("Chisquared vs Semi-amplitude")
    plt.xlabel("Semi-amplitude")
    plt.ylabel("Chisquared")
    #plt.ylim(0,1000)
   
    #find the semiaplitude with min chisquared
    min_y = min(chi_squared)
    min_x = amp[chi_squared.index(min_y)]
  
    #find confidence interval
    CI_array = [min_y+1]*len(amp)
    plt.plot(amp, CI_array)
    idx = np.argwhere(np.diff(np.sign(np.array(chi_squared) - np.array(CI_array)))).flatten()
    plt.show()
       
    print("Minimum Amplitude: {}".format(min_x))
    print("Minimum Chisquared: {}".format(min_y))
    print("Confidence Interval: {}".format(amp[idx]))
    
    plt.plot(time % found_period,rv_model , '.')
    plt.plot(time % found_period, min_x * np.sin((2*np.pi*(time % found_period))/found_period - phase), '.')
    plt.show()
    
    bin_means, bin_edges, binnumber = stats.binned_statistic(time % found_period,
         rv_model, statistic='median', bins=20)
    bin_width = (bin_edges[1] - bin_edges[0])

    stds = []
    pairs = zip(rv_model, binnumber)

    for n in list(set(binnumber)): 
        in_bin = [x for x, nbin in pairs if nbin == n]
        stds.append(np.std(in_bin))

    bin_centers = []

    for i in range(len(bin_edges) -  1):
        center = bin_edges[i] + (float(bin_edges[i + 1]) - float(bin_edges[i]))/2.
        bin_centers.append(center)

    plt.figure()
    #plt.errorbar(bin_centers, bin_means, yerr=stds, fmt='o')
    plt.hlines(bin_means, bin_edges[:-1], bin_edges[1:], colors='g', lw=5,
        label='binned statistic of data')
    #plt.vlines(bin_centers, bin_means - stds, bin_means + stds)
    plt.plot((binnumber - 0.5) * bin_width, rv_model, '.', alpha=0.5)
    plt.legend()
    plt.show()
